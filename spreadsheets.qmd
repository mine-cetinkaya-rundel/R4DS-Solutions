---
title: "Spreadsheets"
---

## **Prerequisites**

```{r}
#| label: setup
#| message: false
library(readxl)
library(tidyverse)
library(writexl)
library(openxlsx)
library(googlesheets4)
gs4_deauth()
```

### **21.2.9 Exercises**

1.  In an Excel file, create the following dataset and save it as `survey.xlsx`. Alternatively, you can download it as an Excel file from [here](https://docs.google.com/spreadsheets/d/1yc5gL-a2OOBr8M7B3IsDNX5uR17vBHOyWZq6xSTG2G8).

![](https://r4ds.hadley.nz/screenshots/import-spreadsheets-survey.png)

Then, read it into R, with `survey_id` as a character variable and `n_pets` as a numerical variable.

```{r}
survey <- read_excel(
  path = "data/survey.xlsx",  
  na = c("", "N/A"))

survey <- survey |>
  mutate(n_pets = ifelse(n_pets == "two", "2", n_pets))|>
  mutate(n_pets = parse_integer(n_pets))

survey
```

2.  In another Excel file, create the following dataset and save it as `roster.xlsx`. Alternatively, you can download it as an Excel file from [here](https://docs.google.com/spreadsheets/d/1LgZ0Bkg9d_NK8uTdP2uHXm07kAlwx8-Ictf8NocebIE).

![](https://r4ds.hadley.nz/screenshots/import-spreadsheets-roster.png){fig-alt="A spreadsheet with 3 columns (group, subgroup, and id) and 12 rows. The group column has two values: 1 (spanning 7 merged rows) and 2 (spanning 5 merged rows). The subgroup column has four values: A (spanning 3 merged rows), B (spanning 4 merged rows), A (spanning 2 merged rows), and B (spanning 3 merged rows). The id column has twelve values, numbers 1 through 12."}

Then, read it into R.
The resulting data frame should be called `roster` and should look like the following.

```{r}
roster <- read_excel("data/roster.xlsx") |>
  fill(group, subgroup)

roster
```

3.  In a new Excel file, create the following dataset and save it as `sales.xlsx`. Alternatively, you can download it as an Excel file from [here](https://docs.google.com/spreadsheets/d/1oCqdXUNO8JR3Pca8fHfiz_WXWxMuZAp3YiYFaKze5V0).

![](https://r4ds.hadley.nz/screenshots/import-spreadsheets-sales.png){fig-alt="A spreadsheet with 2 columns and 13 rows. The first two rows have text containing information about the sheet. Row 1 says \"This file contains information on sales\". Row 2 says \"Data are organized by brand name, and for each brand, we have the ID number for the item sold, and how many are sold.\". Then there are two empty rows, and then 9 rows of data."}

a.  Read `sales.xlsx` in and save as `sales`. The data frame should look like the following, with `id` and `n` as column names and with 9 rows.

```{r}
sales <- read_excel(
  "data/sales.xlsx", 
  range = "A5:B13", 
  col_names = c("id", "n"))

sales
```

b.  Modify `sales` further to get it into the following tidy format with three columns (`brand`, `id`, and `n`) and 7 rows of data. Note that `id` and `n` are numeric, `brand` is a character variable.

```{r}
sales |>
  mutate(brand = if_else(str_detect(id, "Brand"), id, NA)) |>
  fill(brand) |>
  filter(n != "n") |>
  relocate(brand) |>
  mutate(
    id = as.numeric(id),
    n = as.numeric(n)
  )
```

4.  Recreate the `bake_sale` data frame, write it out to an Excel file using the `write.xlsx()` function from the openxlsx package.

```{r}
bake_sale <- tibble(
  item = c("brownie", "cupcake", "cookie"),
  quantity = c(10, 5, 8)
)
write.xlsx(bake_sale, file = "data/bake_sale.xlsx")
```

5.  In [Chapter 8](https://r4ds.hadley.nz/data-import.html) you learned about the [`janitor::clean_names()`](https://sfirke.github.io/janitor/reference/clean_names.html) function to turn columns names into snake case. Read the `students.xlsx` file that we introduced earlier in this section and use this function to "clean" the column names.

```{r}
students <- read_excel("data/students.xlsx")
students <- janitor::clean_names(students, case = "snake")
students
```

6.  What happens if you try to read in a file with `.xlsx` extension with [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html)?

It will result in an error since `read_xls` only works for old `xls` extension.
To read the file; we either -explicitly- call the read function for `xlsx` file (`read_xlsx`) or use `read_excel` which calls `excel_format` to determine if `path` is `xls` or `xlsx`.

```{r}
#| error: true
students <- read_xls("data/students.xlsx")
```

### **21.3.6 Exercises**

1.  Read the `students` dataset from earlier in the chapter from Excel and also from Google Sheets, with no additional arguments supplied to the [`read_excel()`](https://readxl.tidyverse.org/reference/read_excel.html) and [`read_sheet()`](https://googlesheets4.tidyverse.org/reference/range_read.html) functions.
    Are the resulting data frames in R exactly the same?
    If not, how are they different?

    ```{r}
    #| message: false
    students_excel <- read_excel("data/students.xlsx")
    students_sheet_id <- "1V1nPp1tzOuutXFLb3G9Eyxi3qxeEhnOXUzL5_BcCQ0w"
    students_googlesheets <- read_sheet(students_sheet_id)

    identical(students_excel, students_googlesheets)
    ```

    ```{r}
    glimpse(students_excel)
    ```

    ```{r}
    glimpse(students_googlesheets)
    ```

    Notice that the `AGE` column is imported as a list from Google sheets to keep the class of each value the same as the source rather than coercing them into a single data type.
    To prevent this from happening, we might need to declare `col_types` in `read_sheet`.

    ```{r}
    #| message: false
    students_excel <- read_excel("data/students.xlsx")
    students_sheet_id <- "1V1nPp1tzOuutXFLb3G9Eyxi3qxeEhnOXUzL5_BcCQ0w"
    students_googlesheets <- read_sheet(
      students_sheet_id, 
      col_types = "dcccc")

    identical(students_excel, students_googlesheets)
    ```

2.  Read the Google Sheet titled survey from <https://pos.it/r4ds-survey>, with `survey_id` as a character variable and `n_pets` as a numerical variable.

    ```{r}
    #| message: false
    survey <- read_sheet(
      "https://docs.google.com/spreadsheets/d/1yc5gL-a2OOBr8M7B3IsDNX5uR17vBHOyWZq6xSTG2G8/", 
      col_types = "cc",
      na = c("", "N/A")
      ) |>
      mutate(n_pets = ifelse(n_pets == "two", "2", n_pets))|>
      mutate(n_pets = parse_integer(n_pets))

    survey
    ```

3.  Read the Google Sheet titled roster from <https://pos.it/r4ds-roster>.
    The resulting data frame should be called `roster` and should look like the following.

```{r}
#| message: false
roster <- read_sheet("https://docs.google.com/spreadsheets/d/1LgZ0Bkg9d_NK8uTdP2uHXm07kAlwx8-Ictf8NocebIE/")|>
  fill(group, subgroup)

roster
```
