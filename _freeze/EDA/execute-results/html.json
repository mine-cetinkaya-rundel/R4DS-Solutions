{
  "hash": "4579f66336a09d51b5983c0427c65a0a",
  "result": {
    "markdown": "---\ntitle: \"Exploratory data analysis\"\n---\n\n\n\n\n## Prerequisites {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n#> ── Attaching core tidyverse packages ───────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ─────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nlibrary(ggbeeswarm)\nlibrary(lvplot)\nlibrary(nycflights13)\n```\n:::\n\n\n## 11.3.3 Exercises {.unnumbered}\n\n1.  All distributions are multimodal, right skewed, and have extreme outliers.\n\n\n    ::: {.cell layout-ncol=\"3\"}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds, aes(x = x)) +\n      geom_histogram(binwidth = 0.1)\n    ggplot(diamonds, aes(x = y)) +\n      geom_histogram(binwidth = 0.1)\n    ggplot(diamonds, aes(x = z)) +\n      geom_histogram(binwidth = 0.1)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-3-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-3-2.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-3-3.png){width=576}\n    :::\n    :::\n\n\n    Typical values for `x` and `y` are larger than `z`, which might suggest `z` is the depth, which matches up with the documentation.\n    Typical values for `x` and `y` are very similar, but the maximum for `y` is much higher, therefore I would guess that `y` is width, since we generally expect width to be larger than length.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    diamonds |>\n      select(x, y, z) |>\n      pivot_longer(cols = everything(), names_to = \"measurement\") |>\n      group_by(measurement) |>\n      summarize(\n        min = min(value),\n        mean = mean(value),\n        median = median(value),\n        sd = sd(value),\n        iqr = IQR(value),\n        max = max(value)\n      )\n    #> # A tibble: 3 × 7\n    #>   measurement   min  mean median    sd   iqr   max\n    #>   <chr>       <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>\n    #> 1 x               0  5.73   5.7  1.12   1.83  10.7\n    #> 2 y               0  5.73   5.71 1.14   1.82  58.9\n    #> 3 z               0  3.54   3.53 0.706  1.13  31.8\n    ```\n    :::\n\n\n2.  The distribution of price is right skewed with a median of \\$2,401.\n    There is a gap in the distribution with very few diamonds around \\$1,500, which is curious -- I can't think of a specific reason why that would be the case.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds, aes(x = price)) + \n      geom_histogram(binwidth = 100) +\n      scale_x_continuous(breaks = seq(0, 20000, 2000))\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-5-1.png){width=768}\n    :::\n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    diamonds |>\n      summarize(\n        min = min(price),\n        mean = mean(price),\n        median = median(price),\n        sd = sd(price),\n        iqr = IQR(price),\n        max = max(price)\n      )\n    #> # A tibble: 1 × 6\n    #>     min  mean median    sd   iqr   max\n    #>   <int> <dbl>  <dbl> <dbl> <dbl> <int>\n    #> 1   326 3933.   2401 3989. 4374. 18823\n    ```\n    :::\n\n\n3.  Only 23 diamonds are 0.99 carats and 1,558 diamonds are 1 carat.\n    This is likely because the market for 0.99 carat diamonds is small.\n    If you can get a 1 carat diamond for just a little but of increase in price.\n    We can see that the typical price for a 1 carat diamond is less than \\$100 more than the typical price for a 0.99 carat diamond.\n    For that small a difference, compared to the actual price of a diamond, many people might be willing to go up to a full carat.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    diamonds |>\n      filter(carat %in% c(0.99, 1)) |>\n      group_by(carat) |>\n      summarize(\n        n = n(),\n        median_price = median(price)\n      )\n    #> # A tibble: 2 × 3\n    #>   carat     n median_price\n    #>   <dbl> <int>        <dbl>\n    #> 1  0.99    23         4780\n    #> 2  1     1558         4864\n    ```\n    :::\n\n\n4.  Specifying `xlim()` filters out any observations not in the specified range while specifying the `xlim` argument in `coord_cartesian()` zooms into the original plot without filtering.\n\n\n    ::: {.cell layout-ncol=\"3\"}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds, aes(x = price)) +\n      geom_histogram(binwidth = 500)\n    ggplot(diamonds, aes(x = price)) +\n      geom_histogram(binwidth = 500) +\n      xlim(0, 5000)\n    #> Warning: Removed 14714 rows containing non-finite values (`stat_bin()`).\n    #> Warning: Removed 2 rows containing missing values (`geom_bar()`).\n    ggplot(diamonds, aes(x = price)) +\n      geom_histogram(binwidth = 500) +\n      coord_cartesian(xlim = c(0, 5000))\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-8-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-8-2.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-8-3.png){width=576}\n    :::\n    :::\n\n\n    This is similar for specifying limits for `y` as well.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds, aes(x = price)) +\n      geom_histogram(binwidth = 500)\n    ggplot(diamonds, aes(x = price)) +\n      geom_histogram(binwidth = 500) +\n      ylim(0, 1000)\n    #> Warning: Removed 13 rows containing missing values (`geom_bar()`).\n    ggplot(diamonds, aes(x = price)) +\n      geom_histogram(binwidth = 500) +\n      coord_cartesian(ylim = c(0, 1000))\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-9-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-9-2.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-9-3.png){width=576}\n    :::\n    :::\n\n\n5.  The plots below show a default view, a view limited with `coord_cartesian()`, and a view limited with `xlim()` and `ylim()`.\n    While `coord_cartesian()` zooms in to the original plot, `xlim()` and `ylim()` first filter the data for cases that fill into those bounds, and then plots them.\n\n\n    ::: {.cell layout-ncol=\"3\"}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds, aes(x = carat)) + \n      geom_histogram(binwidth = 0.1) +\n      labs(title = \"No limits\")\n    ggplot(diamonds, aes(x = carat)) + \n      geom_histogram(binwidth = 0.1) +\n      coord_cartesian(xlim = c(0, 1), ylim = c(0, 5000)) +\n      labs(title = \"coord_cartesian(xlim = c(0, 1), ylim = c(0, 5000))\")\n    ggplot(diamonds, aes(x = carat)) + \n      geom_histogram(binwidth = 0.1) +\n      xlim(0, 1) +\n      ylim (0, 5000) +\n      labs(title = \"xlim(0, 1) + ylim (0, 5000)\")\n    #> Warning: Removed 17502 rows containing non-finite values (`stat_bin()`).\n    #> Warning: Removed 6 rows containing missing values (`geom_bar()`).\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-10-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-10-2.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-10-3.png){width=576}\n    :::\n    :::\n\n\n## 11.4.1 Exercises {.unnumbered}\n\n1.  In a histogram, missing values are not plotted and a warning is emitted.\n    In a bar plot, missing values are plotted.\n    While it's not possible to plot a missing numeric value, it is feasible to represent a missing categorical one with \"NA\" or \"missing\" as the level.\n\n\n    ::: {.cell layout-ncol=\"2\"}\n    \n    ```{.r .cell-code}\n    data_frame_with_missings <- tibble(\n      x = c(runif(9), NA),\n      y = c(rep(c(\"a\", \"b\", \"c\"), 3), NA)\n    )\n    \n    ggplot(data_frame_with_missings, aes(x = x)) +\n      geom_histogram()\n    #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    #> Warning: Removed 1 rows containing non-finite values (`stat_bin()`).\n    ggplot(data_frame_with_missings, aes(x = y)) +\n      geom_bar()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-11-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-11-2.png){width=576}\n    :::\n    :::\n\n\n2.  The `na.rm` argument removes `NA`s in the data before calculating these summary statistics.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    data_frame_with_missings |>\n      summarize(\n        x_mean = mean(x),\n        x_mean_narm = mean(x, na.rm = TRUE),\n        x_sum = sum(x),\n        x_sum_narm = sum(x, na.rm = TRUE)\n      )\n    #> # A tibble: 1 × 4\n    #>   x_mean x_mean_narm x_sum x_sum_narm\n    #>    <dbl>       <dbl> <dbl>      <dbl>\n    #> 1     NA       0.407    NA       3.67\n    ```\n    :::\n\n\n3.  **TO DO: Answer this question.**\n\n## 11.5.1.1 Exercises {.unnumbered}\n\n1.  TO DO: Add text.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    canceled_flights <- flights |> \n      mutate(\n        cancelled = is.na(dep_time),\n        sched_hour = sched_dep_time %/% 100,\n        sched_min = sched_dep_time %% 100,\n        sched_dep_time = sched_hour + (sched_min / 60)\n      ) \n    ```\n    :::\n\n\n2.  I would say maybe clarity or just straight up price,because the lower quality diamonds correspond to people buying them who don't really know about diamonds or don't care about the quality,theres alot more lower quality diamonds than higher quality.\n\n3.  It switching the x and y its alot faster.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(mpg, aes(x = hwy, y = fct_reorder(class, hwy, median))) +\n      geom_boxplot() + coord_flip()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-14-1.png){width=576}\n    :::\n    :::\n\n\n4.  One problem with boxplots is that they were developed in an era of much smaller datasets and tend to display a prohibitively large number of \"outlying values\".\n    One approach to remedy this problem is the letter value plot.\n    Install the lvplot package, and try using `geom_lv()` to display the distribution of price vs. cut.\n    What do you learn?\n    How do you interpret the plots?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds,aes(x = cut,y = price)) +\n      geom_lv()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-15-1.png){width=576}\n    :::\n    :::\n\n```{=html}\n<!-- -->\n```\n\n5.  geom_violin shows a basic understanding of the amount of diamonds while geom_histogram shows the further outliers better and where they are and geom_freqpoly shows the count better\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds,aes(x = price, y = clarity)) +\n      geom_violin()\n    \n    ggplot(diamonds,aes(x = price)) +\n      geom_histogram() +\n      facet_wrap(~clarity, ncol = 1, scales = \"free_y\")\n    #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    \n    ggplot(diamonds,aes(x = price, color = clarity)) +\n      geom_freqpoly()\n    #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-16-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-16-2.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-16-3.png){width=576}\n    :::\n    :::\n\n```{=html}\n<!-- -->\n```\n\n6.  `geom_beeswarm()` makes it so you have more control over overplotting datasets, while geom_jitter to me seems like just a default that you can use on the go but if you do want more customization ggbeeswarm is better for handling overplotting.\n\n## 11.5.2.1 Exercises {.unnumbered}\n\n1.  **TO DO: Add text.**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds, aes(x = cut, y = color)) +\n      geom_count()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-17-1.png){width=576}\n    :::\n    :::\n\n```{=html}\n<!-- -->\n```\n\n2.  **TO DO: Add text.**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    count(diamonds,color,cut)\n    #> # A tibble: 35 × 3\n    #>   color cut           n\n    #>   <ord> <ord>     <int>\n    #> 1 D     Fair        163\n    #> 2 D     Good        662\n    #> 3 D     Very Good  1513\n    #> 4 D     Premium    1603\n    #> 5 D     Ideal      2834\n    #> 6 E     Fair        224\n    #> # ℹ 29 more rows\n     \n    ggplot(diamonds,aes( x = color, fill = cut)) +\n      geom_bar(position = \"fill\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-18-1.png){width=576}\n    :::\n    :::\n\n```{=html}\n<!-- -->\n```\n\n3.  **TO DO:** Add text.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      summarise(dest,month,year) |> \n      group_by(dest,month)\n    #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated\n    #> in dplyr 1.1.0.\n    #> ℹ Please use `reframe()` instead.\n    #> ℹ When switching from `summarise()` to `reframe()`, remember that\n    #>   `reframe()` always returns an ungrouped data frame and adjust accordingly.\n    #> # A tibble: 336,776 × 3\n    #> # Groups:   dest, month [1,113]\n    #>   dest  month  year\n    #>   <chr> <int> <int>\n    #> 1 IAH       1  2013\n    #> 2 IAH       1  2013\n    #> 3 MIA       1  2013\n    #> 4 BQN       1  2013\n    #> 5 ATL       1  2013\n    #> 6 ORD       1  2013\n    #> # ℹ 336,770 more rows\n    ```\n    :::\n\n\n## 11.5.3.1 Exercises {.unnumbered}\n\n1.  If you want to use cut_width know you r datas values,if you use cut_number know your sample size.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    smaller <- diamonds |> \n      filter(carat < 3)\n    \n    # visualize price binning by carat, cut_width()\n    ggplot(smaller, aes(x = price, y = ..density..,)) +\n      geom_freqpoly(aes(color = cut_width(carat, 0.5)))\n    #> Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\n    #> ℹ Please use `after_stat(density)` instead.\n    #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    \n    # visualize price binning by carat, cut_number(), 10 bins\n    ggplot(smaller, aes(x = price, y = ..density..,)) +\n      geom_freqpoly(aes(color = cut_number(carat, 10)))\n    #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-20-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-20-2.png){width=576}\n    :::\n    :::\n\n\n2.  Visualize the distribution of `carat`, partitioned by `price`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds, aes(x = price, y = carat)) + \n      geom_boxplot()\n    #> Warning: Continuous x aesthetic\n    #> ℹ did you forget `aes(group = ...)`?\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-21-1.png){width=576}\n    :::\n    :::\n\n```{=html}\n<!-- -->\n```\n\n3.  Its not what i expect even the large diamonds are the same price as smaller diamonds.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds,aes(x = carat, y = price)) +\n      geom_point()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-22-1.png){width=576}\n    :::\n    :::\n\n```{=html}\n<!-- -->\n```\n\n4.  **TO DO: Add text.**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(diamonds,aes(x = price, color = cut, fill = cut)) +\n      geom_freqpoly()\n    #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    \n    ggplot(diamonds,aes(x = carat, color = cut, fill = cut)) +\n      geom_freqpoly()\n    #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-23-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-23-2.png){width=576}\n    :::\n    :::\n\n```{=html}\n<!-- -->\n```\n\n5.  This scatterplot shows outliers and binned plots don't.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    diamonds |> \n      filter(x >= 4) |> \n      ggplot(aes(x = x, y = y)) +\n      geom_point() +\n      coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))\n    \n    diamonds |> \n      filter(x >= 4) |> \n      ggplot(aes(x = x)) +\n      geom_histogram()\n    #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-24-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-24-2.png){width=576}\n    :::\n    :::\n\n```{=html}\n<!-- -->\n```\n\n6.  If you want to control the width you use cut_width, if you want to choose the number of bins use cut_number.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(smaller, aes(x = carat, y = price)) + \n      geom_boxplot(aes(group = cut_number(carat, 20)))\n    \n    smaller |> \n      mutate(carat_group = cut_number(carat,20)) |>\n      count(carat_group)\n    #> # A tibble: 20 × 2\n    #>   carat_group     n\n    #>   <fct>       <int>\n    #> 1 [0.2,0.3]    4203\n    #> 2 (0.3,0.31]   2249\n    #> 3 (0.31,0.32]  1840\n    #> 4 (0.32,0.35]  2766\n    #> 5 (0.35,0.4]   3333\n    #> 6 (0.4,0.42]   2088\n    #> # ℹ 14 more rows\n    \n    ggplot(smaller, aes(x = carat, y = price)) + \n      geom_boxplot(aes(group = cut_width(carat, .1)))\n    \n    smaller |>\n      mutate(carat_group = cut_width(carat,.1)) |> \n      count(carat_group)\n    #> # A tibble: 27 × 2\n    #>   carat_group     n\n    #>   <fct>       <int>\n    #> 1 [0.15,0.25]   785\n    #> 2 (0.25,0.35] 10273\n    #> 3 (0.35,0.45]  6231\n    #> 4 (0.45,0.55]  5417\n    #> 5 (0.55,0.65]  2328\n    #> 6 (0.65,0.75]  5249\n    #> # ℹ 21 more rows\n    ```\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-25-1.png){width=576}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](EDA_files/figure-html/unnamed-chunk-25-2.png){width=576}\n    :::\n    :::\n",
    "supporting": [
      "eda_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}